{"version":3,"sources":["diagnostics.js"],"names":[],"mappings":"AAAA;;;;;;;;;AASA,IAAI,KAAK,QAAQ,IAAR,CAAL;AACJ,IAAI,KAAK,QAAQ,IAAR,CAAL;AACJ,IAAI,UAAU,QAAQ,YAAR,CAAV;;AAEJ,QAAQ,QAAR,CAAiB,QAAjB;;;AAGA,IAAI,OAAO,QAAQ,GAAR,CAAY,QAAZ,KAAyB,aAAzB;;;AAGX,IAAI,UAAU,6BAAV;;;;;;;AAOJ,QAAQ,GAAR,GAAc,UAAU,GAAV,EAAe,IAAf,EAAqB;;;;;;;;AAQ/B,QAAI,KAAK,KAAL,KAAe,OAAf,EAAwB;;AAExB,YAAI,UAAU,GAAG,GAAH,GAAS,GAAT;;AAFU,YAIpB,KAAK,IAAL,EAAW;;;AAGX,sBAAU,GAAG,GAAH,GAAS,OAAT;AAHC,SAAf;;AAMA,WAAG,cAAH,CAAkB,OAAlB,EAA2B,OAA3B;AAVwB,KAA5B;;;;;;;AAR+B,QA0B3B,CAAC,IAAD,EAAO;;;;AAIP,aAAK,OAAL,GAAe,KAAf;AAJO,KAAX;CA1BU;;AAmCd,IAAI,WAAW,KAAX;;AAEJ,OAAO,OAAP,GAAiB;;;AAGb,UAAM,UAAU,OAAV,EAAmB;;;;;AAKrB,YAAI,QAAJ,EAAc;AACV;AADU,SAAd;AAGA,mBAAW,IAAX,CARqB;;AAUrB,YAAI,IAAJ,EAAU;;;;AAIN,oBAAQ,MAAR,CAAe,OAAf,EAJM;SAAV,MAMO;;;;;AAKH,oBAAQ,MAAR,CAAe,OAAf,EAAwB,CAAC,OAAD,CAAxB,EALG;SANP;KAVE;;;;AA2BN,UAAM,YAAY;AACd,YAAI,QAAJ,EAAc;AACV,uBAAW,KAAX,CADU;AAEV,oBAAQ,MAAR;AAFU,SAAd;KADE;CA9BV","file":"diagnostics-compiled.js","sourcesContent":["\"use strict\";\r\n// In this example we are showing how to properly use pg-monitor to log\r\n// errors in a DEV and PROD environments.\r\n\r\n// As an alternative for a PROD environment, instead of using pg-monitor\r\n// you could handle event 'error' within initialization options yourself,\r\n// which may be a little better performing, but lacks all the nice formatting\r\n// provided by pg-monitor.\r\n\r\nlet os = require('os');\r\nlet fs = require('fs');\r\nlet monitor = require('pg-monitor');\r\n\r\nmonitor.setTheme('matrix'); // changing the default theme;\r\n\r\n// Flag to indicate whether we are in a DEV environment:\r\nlet $DEV = process.env.NODE_ENV === 'development';\r\n\r\n// Log file for database-related errors:\r\nlet logFile = './app_api/models/errors.log';\r\n\r\n// Below we are logging errors exactly the way they are reported by pg-monitor,\r\n// which you can tweak any way you like, as parameter 'info' provides all the\r\n// necessary details for that.\r\n//\r\n// see: https://github.com/vitaly-t/pg-monitor#log\r\nmonitor.log = function (msg, info) {\r\n\r\n    // In a PROD environment we will only receive event 'error',\r\n    // because this is how we set it up below.\r\n\r\n    // And the check below is for DEV environment only, as we want to log\r\n    // errors only, or else the file will grow out of proportion in no time.\r\n\r\n    if (info.event === 'error') {\r\n\r\n        let logText = os.EOL + msg; // line break + next error message;\r\n\r\n        if (info.time) {\r\n            // If it is a new error being reported,\r\n            // and not an additional error line;\r\n            logText = os.EOL + logText; // add another line break in front;\r\n        }\r\n\r\n        fs.appendFileSync(logFile, logText); // add error handling as required;\r\n    }\r\n\r\n    // We absolutely must not let the monitor write anything into the console\r\n    // while in a PROD environment, and not just because nobody will be able\r\n    // to see it there, but mainly because the console is incredibly slow and\r\n    // hugely resource-consuming, suitable only for debugging.\r\n\r\n    if (!$DEV) {\r\n\r\n        // If it is not a DEV environment:\r\n\r\n        info.display = false; // display nothing;\r\n    }\r\n\r\n};\r\n\r\nlet attached = false;\r\n\r\nmodule.exports = {\r\n\r\n    // Monitor initialization function;\r\n    init: function (options) {\r\n\r\n        // We are checking to avoid calling 'attach' more than once,\r\n        // without calling 'detach', as it will throw an error;\r\n\r\n        if (attached) {\r\n            return; // shouldn't call it more than once;\r\n        }\r\n        attached = true;\r\n\r\n        if ($DEV) {\r\n\r\n            // In a DEV environment, we attach to all supported events:\r\n\r\n            monitor.attach(options);\r\n\r\n        } else {\r\n\r\n            // In a PROD environment we should only attach to the type of events\r\n            // that we intend to log. And we are only logging event 'error' here:\r\n\r\n            monitor.attach(options, ['error']);\r\n        }\r\n    },\r\n\r\n    // This is one method that in practice we never really need. It is\r\n    // here just to show that it is possible, in case it is ever needed.\r\n    done: function () {\r\n        if (attached) {\r\n            attached = false;\r\n            monitor.detach(); // detach from all the events;\r\n        }\r\n    }\r\n};\r\n"]}